name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: 12

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  typecheck:
    name: Typecheck
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Setup Node.js environment ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2.1.1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache
      uses: actions/cache@v2.1.0
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    # Runs a set of commands using the runners shell
    - name: Install dependencies
      run: |
        yarn --ignore-engines --frozen-lockfile --ignore-scripts
        yarn lerna:init

    - name: Typecheck all packages
      run: yarn typecheck

  unit_test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js environment ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2.1.1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache
      uses: actions/cache@v2.1.0
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        yarn --ignore-engines --frozen-lockfile --ignore-scripts
        yarn lerna:init

    - name: Build
      run: yarn build

    - name: Test unit all packages
      run: yarn test:unit

  linting_and_formatting:
    name: Lint and format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js environment ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2.1.1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - name: Cache
      uses: actions/cache@v2.1.0
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: |
        yarn --ignore-engines --frozen-lockfile --ignore-scripts
        yarn lerna:init

    - name: Build
      run: yarn build

    - name: Check code formatting all packages
      run: yarn check:format

    - name: Lint code all packages
      run: yarn lint
